{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;;AAGmB;AACnB;AACsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,+CAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kDAAQ,CAAC,0CAAK;AAC1B;AACA;AACA,kCAAkC,4DAAmB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,6DAAmB;AAC/C;AACA;AACA,YAAY,kDAAQ;AACpB;AACA;AACA;AACA;AACA,uCAAuC,SAAS;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iEAAe,WAAW,EAAC;;;;;;;;;;;;;;;;;;;AClER;AACnB;AACmE;AACnB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+CAAK;AAC7B;AACA;AACA,QAAQ,iDAAS;AACjB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,wDAAe;AAClC;AACA,IAAI,+CAAU,YAAY;AAC1B,IAAI,kDAAQ,CAAC,0CAAK,YAAY;AAC9B;AACA,oBAAoB,6DAAmB;AACvC;AACA;AACA,mCAAmC,QAAQ;AAC3C;AACA,QAAQ,mEAAyB;AACjC;AACA,8BAA8B,iDAAY;AAC1C;AACA,mCAAmC,SAAS;AAC5C;AACA,MAAM;AACN,QAAQ,mEAAyB;AACjC,QAAQ,wDAAe;AACvB;AACA;AACA,IAAI,kDAAU;AACd;AACA;;;;;;;;;;;;;;;;;ACnDmB;AACnB;AACsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oDAAe;AACzC;AACA;AACA,4BAA4B,6DAAmB,CAAC,0CAAK;AACrD;AACA;AACA,kCAAkC,4DAAmB,CAAC,0CAAK;AAC3D;AACA;AACA,YAAY,mEAAyB,CAAC,0CAAK;AAC3C;AACA;AACA,uCAAuC,SAAS;AAChD;AACA;AACA,YAAY,iDAAY;AACxB,YAAY,kDAAQ,CAAC,0CAAK;AAC1B;AACA;AACA;AACA,YAAY,6DAAmB;AAC/B;AACA;AACA;AACA;AACA,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;;;;;;ACrDyC;AACnE;AAMmB;AACnB;AAC+C;AAC/C;AACgD;AAChD;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iDAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,wDAAe;AACpC;AACA,wBAAwB,6DAAmB;AAC3C;AACA;AACA;AACA,kDAAkD,IAAI;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,eAAe,+CAAU;AACzB,wBAAwB,6DAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA,QAAQ,mEAAyB;AACjC,kCAAkC,4DAAmB;AACrD;AACA,mCAAmC,aAAa;AAChD;AACA;AACA,QAAQ,mEAAyB;AACjC,kCAAkC,4DAAmB;AACrD;AACA;AACA;AACA,uCAAuC,YAAY;AACnD,uCAAuC,aAAa;AACpD,UAAU;AACV,YAAY,wDAAe;AAC3B,uCAAuC,aAAa;AACpD;AACA;AACA,MAAM;AACN,8BAA8B,4DAAmB;AACjD;AACA;AACA,mCAAmC,aAAa;AAChD,QAAQ,kDAAQ;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,kDAAQ,CAAC,0CAAK;AAClB,IAAI,6DAAmB;AACvB;AACA,IAAI,kDAAU;AACd;AACA;;;;;;;;;;;;;;;;;;;ACjIwC;AACD;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAU;AACtB,UAAU;AACV,YAAY,oDAAO;AACnB;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC1DgE;AAChE;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA,0BAA0B,cAAc,QAAQ,QAAQ,IAAI,cAAc;AAC1E;AACA,qEAAqE,SAAS;AAC9E;AACA,iDAAiD,UAAU;AAC3D,iDAAiD,UAAU;AAC3D,qDAAqD,cAAc;AACnE,oDAAoD,aAAa;AACjE,kDAAkD,WAAW;AAC7D;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD;AACA;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,cAAc,QAAQ,QAAQ;AAC7E;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,oDAAoD,cAAc;AAClE,mDAAmD,YAAY;AAC/D,oDAAoD,cAAc;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kDAAQ;AACpB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,4DAAkB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,4DAAkB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,MAAM;AACnB,QAAQ,4DAAkB;AAC1B;AACA;AACA;AACA;AACA,QAAQ,iDAAO;AACf;AACA;AACA;AACA;AACsE;AACtE;AACA,iEAAe,YAAY;;;;;;;;;;;;;;;;;;;;;ACzMkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,kBAAkB,YAAY,IAAI,eAAe;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4DAAmB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;;;;;;;;;AC9FiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iDAAY;AACrC;AACA;AACA,yDAAyD,QAAQ;AACjE;AACA,SAAS;AACT;AACA;AACA;AACA,iEAAe,WAAW;;;;;;UC5B1B;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;ACNA;AACA;AAC4C;AACI;AACE;AACJ;AACN;AACM;AACE;AAChD;AACA;AACA,2DAAY;AACZ,gEAAW;AACX,+DAAU;AACV,2DAAQ;AACR,qDAAK;AACL,+DAAU;AACV,gEAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://task_1/./js/modules/archiveNote.js","webpack://task_1/./js/modules/createNote.js","webpack://task_1/./js/modules/deleteNote.js","webpack://task_1/./js/modules/editNote.js","webpack://task_1/./js/modules/modal.js","webpack://task_1/./js/modules/render.js","webpack://task_1/./js/modules/service.js","webpack://task_1/./js/modules/showArchive.js","webpack://task_1/webpack/bootstrap","webpack://task_1/webpack/runtime/define property getters","webpack://task_1/webpack/runtime/hasOwnProperty shorthand","webpack://task_1/webpack/runtime/make namespace object","webpack://task_1/./js/script.js"],"sourcesContent":["import {\r\n    saveToLS,\r\n    checkIdFromCategory\r\n} from \"./service\";\r\n\r\nimport { chooseArrOfCategory, notes } from \"./render\";\r\n\r\n\r\nfunction archiveNote(parentSelector) {\r\n    const notesList = document.querySelector(parentSelector);\r\n    // Зазначаємо нотатку архівною\r\n    notesList.addEventListener('click', archiveTask);\r\n\r\n    // Ф-я архівування нотатки\r\n    function archiveTask(e) {\r\n        // Перевірка, що натискання було по кнопці \"archive\"\r\n        if (e.target.dataset.action === 'archive') {\r\n\r\n            const parentNode = e.target.closest('.card');\r\n\r\n            // Id нотатки\r\n            const id = parentNode.id;\r\n\r\n            // В загальному масиві знаходимо відповідний об'єкт по id\r\n            const noteArchive = notes.find(note => note.id === id);\r\n\r\n            // Змінюємо занчення на протилежне\r\n            noteArchive.completed = !noteArchive.completed;\r\n\r\n            // Додаєм класи для відображення\r\n            parentNode.classList.toggle('archive');\r\n            e.target.previousElementSibling.classList.toggle('pointer'); // заборона натискання\r\n            e.target.nextElementSibling.classList.toggle('pointer'); // заборона натискання\r\n\r\n            if (parentNode.classList.contains('archive')) {\r\n                parentNode.setAttribute('hidden', '');\r\n            }\r\n\r\n            // Зберігаємо у LocalStorage\r\n            saveToLS(notes, 'notes');\r\n\r\n            // Обираємо відповідний масив\r\n            const arrOfCategory = chooseArrOfCategory(noteArchive);\r\n\r\n            // Змінюємо нотатку у обраному масиві\r\n            const noteNew = arrOfCategory.find(note => note.id === id);\r\n            Object.assign(noteNew, noteArchive);\r\n\r\n            // Id відповідної категорії\r\n            const checkId = checkIdFromCategory(noteArchive.category);\r\n\r\n            // Зберігаємо у LocalStorage\r\n            saveToLS(arrOfCategory, noteArchive.category);\r\n\r\n            // Створення масиву всіх об'єкті з відповідною категорією\r\n            const arrOfarchive = arrOfCategory.filter(note => note.completed === true);\r\n\r\n            document.querySelector(`#${checkId} .archive-tasks`).innerText = arrOfarchive.length;\r\n\r\n            // Відображення кнопки \"Show archive\" після натискання\r\n            const btnShowArciveArr = document.querySelectorAll('.total-btn');\r\n\r\n            btnShowArciveArr.forEach(item => {\r\n                if (item.closest('.card').id === checkId) {\r\n                    item.classList.remove('hide');\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default archiveNote;\r\n","import {\r\n    today,\r\n    saveToLS,\r\n    checkIdFromCategory,\r\n    changeCategoryOfTotalList\r\n} from \"./service\";\r\n\r\nimport { newObjFromModal, createTotalList, notes } from \"./render\";\r\nimport { openModal, closeModal } from \"./modal\";\r\n\r\nfunction createNote(formSelector, modalSelector, createBtn) {\r\n    const form = document.querySelector(formSelector),\r\n        createNoteButton = document.querySelector(createBtn);\r\n\r\n    // Створюю натискання на кнопку Create Note (додати нову нотатку)\r\n    createNoteButton.addEventListener('click', () => {\r\n        form.reset();\r\n        const dateNow = form.querySelector('#date');\r\n        const datesInput = form.querySelector('#dates');\r\n\r\n        dateNow.value = today();\r\n        datesInput.setAttribute('hidden', '');\r\n\r\n        openModal(modalSelector);\r\n    });\r\n}\r\n\r\n// Ф-я додавання нотатки у модальному вікні\r\nfunction addNote(e, modalSelector) {\r\n    // Скасовуємо відправлення форми\r\n    e.preventDefault();\r\n\r\n    // Формуємо розмітку для нової нотатки\r\n    let noteHTML = newObjFromModal(Date.now());\r\n    noteHTML.render();\r\n    notes.push(noteHTML); // додаєм данні в загальний масив\r\n    saveToLS(notes, 'notes'); // додаємо дані до сховища браузера\r\n\r\n    const checkId = checkIdFromCategory(noteHTML.category);\r\n\r\n    // Якщо немає у Total List такого об'єкта категорії, тоді додаємо, інакше змінюємо його\r\n    if (document.querySelector(`#${checkId}`)) {\r\n\r\n        changeCategoryOfTotalList(noteHTML);\r\n\r\n        const arrOfCategory = notes.filter(note => note.category === noteHTML.category);\r\n\r\n        document.querySelector(`#${checkId} .active-tasks`).innerText = arrOfCategory.length;\r\n\r\n    } else {\r\n        changeCategoryOfTotalList(noteHTML);\r\n        createTotalList(noteHTML);\r\n    }\r\n\r\n    closeModal(modalSelector);\r\n}\r\n\r\nexport { addNote, createNote };","import {\r\n    saveToLS,\r\n    checkIdFromCategory,\r\n    changeCategoryOfTotalList,\r\n    checkTotalListTasks\r\n} from \"./service\";\r\n\r\nimport { chooseArrOfCategory, notes } from \"./render\";\r\n\r\n\r\nfunction deleteNote(parentSelector) {\r\n    const notesList = document.querySelector(parentSelector);\r\n\r\n    // Видалення нотатки\r\n    notesList.addEventListener('click', deleteTask);\r\n\r\n    // Ф-я видалення нотатки\r\n    function deleteTask(e) {\r\n\r\n        // Перевірка, що натискання було по кнопці \"delete\"\r\n        if (e.target.dataset.action === 'delete') {\r\n\r\n            const parentNode = e.target.closest('.card');\r\n\r\n            // Id нотатки\r\n            const id = parentNode.id;\r\n\r\n            // Знаходимо індекс нотатки в масиві\r\n            const index = notes.findIndex(note => note.id === id);\r\n\r\n            // Id  по назві категорії\r\n            const checkId = checkIdFromCategory(notes[index].category);\r\n\r\n            // Обираємо відповідний масив\r\n            const arrOfCategory = chooseArrOfCategory(notes[index]);\r\n\r\n            // Видалення із масиву відповідної категорії\r\n            changeCategoryOfTotalList(notes[index]);\r\n\r\n            // Додаємо на сторинку його довжину\r\n            document.querySelector(`#${checkId} .active-tasks`).innerText = arrOfCategory.length;\r\n\r\n            // Видаляємо цей ел із загального масиву\r\n            notes.splice(index, 1);\r\n            saveToLS(notes, 'notes');\r\n            // Видаляємо зі сторинки\r\n            parentNode.remove();\r\n            // перевіряємо у Total List чи є пусті масиви з нотатками\r\n            checkTotalListTasks();\r\n        }\r\n    }\r\n}\r\n\r\nexport default deleteNote;\r\n","import { newObjFromModal, createTotalList, notes } from \"./render\";\r\n\r\nimport {\r\n    saveToLS,\r\n    checkIdFromCategory,\r\n    changeCategoryOfTotalList,\r\n    checkTotalListTasks\r\n} from \"./service\";\r\n\r\nimport { chooseArrOfCategory } from \"./render\";\r\n\r\nimport { openModal, closeModal } from \"./modal\";\r\n\r\n\r\n\r\nlet id; // допоміжна змінна\r\n\r\nfunction editNote(formSelector, modalSelector, prentNode) {\r\n    const notesList = document.querySelector(prentNode),\r\n        modalWindow = document.querySelector(modalSelector),\r\n        form = document.querySelector(formSelector);\r\n    // Редагування нотатки\r\n    notesList.addEventListener('click', edit);\r\n\r\n    // Ф-я дії із нотаткою після натискання кнопки \"edit\"\r\n    function edit(e) {\r\n        // Перевірка, що натискання було по кнопці \"edit\"\r\n        if (e.target.dataset.action === 'edit') {\r\n\r\n            const parentNode = e.target.closest('.card'),\r\n                datesInput = form.querySelector('#dates'),\r\n                forDates = form.querySelector('#forDates'),\r\n                arrForm = form.querySelectorAll('[name]'), // псевдомасив із форми мод вікна по атрибуту [name]\r\n                arrNote = parentNode.querySelectorAll('li'); // псевдомасив із батькивскої ноди елементів li\r\n\r\n            // відображаєм input з датами, щоб показати чи там буули дані\r\n            datesInput.removeAttribute('hidden');\r\n\r\n            // призначаємо елементам форми дані із нотатки\r\n            arrForm.forEach((item, i) => {\r\n                item.value = arrNote[i].innerText;\r\n            });\r\n\r\n            // розділяємо строку на масив\r\n            let arrDates = arrNote[4].innerText.split(', ');\r\n\r\n            // призначаємо input з датою значення останього ел масиву.\r\n            forDates.value = arrDates[arrDates.length - 1];\r\n\r\n            // призначаємо допоміжної змінні відповідний id\r\n            id = parentNode.id;\r\n\r\n            // встановлюємо допоміжний атрибут на мод вікно, \r\n            // щоб потім визначити які дії робити по натисканню кнопки 'submit'\r\n            modalWindow.setAttribute('data-forEdit', '');\r\n\r\n            // відкриваєм мод вікно\r\n            openModal(modalSelector);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Ф-я редагування нотатки\r\nfunction changeNote(e, modalSelector) {\r\n    // Скасовуємо відправлення форми\r\n    e.preventDefault();\r\n\r\n    // Створюємо об'єкт із відповідним id\r\n    const noteHTML = newObjFromModal(id.slice(2));\r\n\r\n    const checkIdNext = checkIdFromCategory(noteHTML.category);\r\n    const nextCategory = noteHTML.category;\r\n\r\n    // масив по атрибуту [data-action] у елемента з відповідним id\r\n    const arrNote = document.querySelectorAll(`#${id} [data-action]`);\r\n\r\n    // змінюємо дані нотатки на дані із об'єкта noteHTML\r\n    arrNote.forEach(item => {\r\n        for (let key in noteHTML) {\r\n            if (key === item.dataset.action) {\r\n                item.innerText = noteHTML[key];\r\n            }\r\n        }\r\n    });\r\n\r\n    // знажодимо нотатку із відповідним id у загальному масиві\r\n    let note = notes.find(note => note.id === id);\r\n    const checkIdPrev = checkIdFromCategory(note.category);\r\n    const prevCategory = note.category;\r\n\r\n    if (prevCategory !== nextCategory) {\r\n\r\n        // Видалення нотатки\r\n        changeCategoryOfTotalList(note);\r\n        const arrOfCategoryPrev = chooseArrOfCategory(note);\r\n        // Запис у Total List\r\n        document.querySelector(`#${checkIdPrev} .active-tasks`).innerText = arrOfCategoryPrev.length;\r\n\r\n        // Додали нотатку\r\n        changeCategoryOfTotalList(noteHTML);\r\n        const arrOfCategoryNext = chooseArrOfCategory(noteHTML);\r\n        // Запис у Total List\r\n        // Якщо немає на сторінці такої категорії, додаємо\r\n        // Якщо є, змінюємо\r\n        if (document.querySelector(`#${checkIdNext}`)) {\r\n            document.querySelector(`#${checkIdNext} .active-tasks`).innerText = arrOfCategoryNext.length;\r\n        } else {\r\n            createTotalList(noteHTML);\r\n            document.querySelector(`#${checkIdNext} .active-tasks`).innerText = arrOfCategoryNext.length;\r\n        }\r\n\r\n    } else {\r\n        const arrOfCategory = chooseArrOfCategory(noteHTML);\r\n        const noteNew = arrOfCategory.find(note => note.id === id);\r\n        Object.assign(noteNew, noteHTML);\r\n        document.querySelector(`#${checkIdNext} .active-tasks`).innerText = arrOfCategory.length;\r\n        saveToLS(arrOfCategory, nextCategory);\r\n    }\r\n\r\n    // призначаємо нотатці note нові значення із об'єкта noteHTML\r\n    Object.assign(note, noteHTML);\r\n\r\n    // зберігаємо у LocalStorage\r\n    saveToLS(notes, 'notes');\r\n    checkTotalListTasks();\r\n    // закриваєм мод вікно\r\n    closeModal(modalSelector);\r\n}\r\n\r\nexport { changeNote, editNote };","import { changeNote } from \"./editNote\";\r\nimport { addNote } from \"./createNote\";\r\n\r\n\r\n// Ф-я відкриває мод вікно\r\nfunction openModal(modalSelector) {\r\n    const modalWindow = document.querySelector(modalSelector);\r\n    modalWindow.classList.add('show');\r\n    modalWindow.classList.remove('hide');\r\n    document.body.style.overflow = 'hidden';\r\n}\r\n\r\n// Ф-я закриває мод вікно\r\nfunction closeModal(modalSelector) {\r\n    const modalWindow = document.querySelector(modalSelector);\r\n    modalWindow.classList.add('hide');\r\n    modalWindow.classList.remove('show');\r\n    document.body.style.overflow = '';\r\n    modalWindow.removeAttribute('data-forEdit');\r\n}\r\n\r\nfunction modal(formSelector, modalSelector, closeBtn, closeSelector) {\r\n    const form = document.querySelector(formSelector),\r\n        modalWindow = document.querySelector(modalSelector),\r\n        closeModalBtn = modalWindow.querySelector(closeBtn),\r\n        modalClose = modalWindow.querySelector(closeSelector);\r\n\r\n\r\n    // Дії із завданням по натисканню 'submit' у мод вікні\r\n    form.addEventListener('submit', (e) => {\r\n        if (modalWindow.hasAttribute('data-forEdit')) {\r\n            changeNote(e, modalSelector);\r\n        } else {\r\n            addNote(e, modalSelector);\r\n        }\r\n    });\r\n\r\n    // закриває мод вікно після натискання на хрестик\r\n    modalClose.addEventListener('click', () => closeModal(modalSelector));\r\n\r\n    // закриває мод вікно за кнопкою cancel\r\n    closeModalBtn.addEventListener('click', () => closeModal(modalSelector)); \r\n\r\n    // Закриває мод вікно по натисканню в НЕ модальне вікно\r\n    modalWindow.addEventListener('click', (e) => {\r\n        if (e.target === modalWindow) {\r\n            closeModal(modalSelector);\r\n        }\r\n    });\r\n\r\n    // Закриває мод вікно за кнопкою Esc\r\n    document.addEventListener('keydown', (e) => {\r\n        if (e.code === 'Escape' && modalWindow.classList.contains('show')) {\r\n            closeModal(modalSelector);\r\n        }\r\n    });\r\n}\r\n\r\n\r\nexport { openModal, closeModal, modal };","import {setImgFromCategory, saveToLS, forDate} from \"./service\";\r\n\r\n\r\nconst notesList = document.querySelector('.notes-list'),\r\n      totalList = document.querySelector('.total-list');\r\n\r\nlet notes = []; // загальний масив для роботи з LocalStorage\r\n\r\n// Масиви по категоріям для Total List\r\nlet tasks = [],\r\n    randomThought = [],\r\n    idea = [],\r\n    quote = [];\r\n\r\n// Клас, який створює однотипни об'єкти\r\nclass Note {\r\n    constructor(id, img, name, date, category, content, dates, completed = false) {\r\n        this.id = id;\r\n        this.img = img;\r\n        this.name = name;\r\n        this.date = date;\r\n        this.category = category;\r\n        this.content = content;\r\n        this.dates = dates;\r\n        this.completed = completed;\r\n        this.cssClass = this.completed ? 'card archive' : 'card'; // Створення CSS класа\r\n        this.atribute = this.completed ? 'hidden' : ''; // відображення архивної нотатки\r\n        this.classPointer = this.completed ? 'material-icons pointer' : 'material-icons';\r\n    }\r\n\r\n    render() {\r\n        const noteHTML = `\r\n            <div class=\"${this.cssClass}\" id=\"${this.id}\" ${this.atribute}>\r\n                <div class=\"card-editable\">\r\n                    <span class=\"material-icons\" data-action=\"img\">${this.img}</span>\r\n                    <ul class=\"card-list\">\r\n                        <li data-action=\"name\">${this.name}</li>\r\n                        <li data-action=\"date\">${this.date}</li>\r\n                        <li data-action=\"category\">${this.category}</li>\r\n                        <li data-action=\"content\">${this.content}</li>\r\n                        <li data-action=\"dates\">${this.dates}</li>\r\n                    </ul>\r\n                </div>\r\n                <div class=\"card-icons\">\r\n                    <span class=\"${this.classPointer} tooltip\" data-action=\"edit\">edit\r\n                        <span class=\"tooltiptext\">EDIT</span>\r\n                    </span>\r\n                    <span class=\"material-icons tooltip\" data-action=\"archive\">archive\r\n                        <span class=\"tooltiptext\">ARCHIVE</span>\r\n                    </span>\r\n                    <span class=\"${this.classPointer} tooltip\" data-action=\"delete\">delete\r\n                        <span class=\"tooltiptext\">DELETE</span>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        `;\r\n        notesList.insertAdjacentHTML('beforeend', noteHTML);\r\n    }\r\n}\r\n\r\nclass Total {\r\n    constructor(img, category, active, archived) {\r\n        this.img = img;\r\n        this.category = category;\r\n        this.active = active;\r\n        this.archived = archived;\r\n        this.id = this.category.split(' ').length === 1 ? this.category : this.category.split(' ').join(\"\");\r\n    }\r\n\r\n    render() {\r\n        const totalHTML = `\r\n            <div class=\"card\" data-category=\"${this.category}\" id=\"${this.id}\">\r\n                <div class=\"card-editable total-list-editable\">\r\n                    <span class=\"material-icons\">\r\n                        ${this.img}\r\n                    </span>\r\n                    <ul class=\"card-list total-list-card\">\r\n                        <li class=\"category-name\">${this.category}</li>\r\n                        <li class=\"active-tasks\">${this.active}</li>\r\n                        <li class=\"archive-tasks\">${this.archived}</li>\r\n                    </ul>\r\n                <button class=\"total-btn\">Show archive</button>\r\n                </div>\r\n            </div>\r\n        `;\r\n        totalList.insertAdjacentHTML('beforeend', totalHTML);\r\n    }\r\n}\r\n\r\n// Ф-я показу на сторінці даних з LocalStorage\r\nfunction renderFromLS() {\r\n    if (localStorage.getItem('notes')) {\r\n        notes = JSON.parse(localStorage.getItem('notes'));\r\n\r\n        // Для списку нотаток:\r\n        notes.forEach(note => {\r\n            const noteHTML = new Note(note.id,\r\n                note.img,\r\n                note.name,\r\n                note.date,\r\n                note.category,\r\n                note.content,\r\n                note.dates,\r\n                note.completed\r\n            );\r\n            noteHTML.render();\r\n        });\r\n\r\n        // Для списку Total List:\r\n        // Знайти в масиві notes всі об'єкти з уникальной категориєй,\r\n        // створити окреми масиви по категоріям, та записати іх у LS,\r\n        notes.forEach(item => {\r\n            const arrOfCategory = chooseArrOfCategory(item);\r\n            arrOfCategory.push(item);\r\n            saveToLS(arrOfCategory, item.category);\r\n        });\r\n\r\n        // для кожної категорії запустити createTotalListFromArr(arr)\r\n        if (tasks.length > 0) {\r\n            createTotalListFromArr(tasks);\r\n        }\r\n        if (randomThought.length > 0) {\r\n            createTotalListFromArr(randomThought);\r\n        }\r\n        if (idea.length > 0) {\r\n            createTotalListFromArr(idea);\r\n        }\r\n        if (quote.length > 0) {\r\n            createTotalListFromArr(quote);\r\n        }\r\n    }\r\n}\r\n\r\n// Ф-я створення та відображення масиву категорії у Total List відповідно масиву\r\nfunction createTotalListFromArr(arr) {\r\n    // Масив заархивованих об'єктів\r\n    const arrOfArchive = arr.filter(note => note.completed === true);\r\n\r\n    // створюємо новий об'єкт класу категорії\r\n    new Total(setImgFromCategory(arr[0].category),\r\n        arr[0].category,\r\n        arr.length,\r\n        arrOfArchive.length).render();\r\n}\r\n\r\n// Ф-я створення та відображення масиву категорії у Total List відповідно об'єкта\r\nfunction createTotalList(obj) {\r\n\r\n    const arrOfCategory = chooseArrOfCategory(obj);\r\n    // Масив заархивованих об'єктів\r\n    const arrOfArchive = arrOfCategory.filter(note => note.completed === true);\r\n\r\n    // створюємо новий об'єкт класу категорії\r\n    new Total(setImgFromCategory(obj.category),\r\n        obj.category,\r\n        arrOfCategory.length,\r\n        arrOfArchive.length).render();\r\n}\r\n\r\n// Обераємо масив відповідно категорії об'єкта\r\nfunction chooseArrOfCategory(obj) {\r\n    let array;\r\n    switch (obj.category) {\r\n        case \"Task\":\r\n            array = tasks;\r\n            break;\r\n        case \"Random Thought\":\r\n            array = randomThought;\r\n            break;\r\n        case \"Idea\":\r\n            array = idea;\r\n            break;\r\n        case \"Quote\":\r\n            array = quote;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return array;\r\n}\r\n\r\n// Функція повертає новий об'єкт із вмісту модального вікна\r\nfunction newObjFromModal(idNum) {\r\n\r\n    // Змінна для отримання даних з форми модального вікна\r\n    const form = document.forms.modal;\r\n\r\n    return new Note(\r\n        `id${idNum}`,\r\n        setImgFromCategory(form.category.value),\r\n        form.name.value,\r\n        form.date.value,\r\n        form.category.value,\r\n        form.content.value,\r\n        forDate()\r\n    );\r\n}\r\n\r\n\r\nexport {chooseArrOfCategory, createTotalList, newObjFromModal, notes};\r\n\r\nexport default renderFromLS;","import {chooseArrOfCategory} from \"./render\";\r\n\r\n\r\n// Формування іконки відповідно до категорії нотатки\r\nfunction setImgFromCategory(category) {\r\n    let imgNote;\r\n\r\n    switch (category) {\r\n        case \"Task\":\r\n            imgNote = 'shopping_cart';\r\n            break;\r\n        case \"Random Thought\":\r\n            imgNote = 'psychology';\r\n            break;\r\n        case \"Idea\":\r\n            imgNote = 'lightbulb_outline';\r\n            break;\r\n        case \"Quote\":\r\n            imgNote = 'format_quote';\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return imgNote;\r\n}\r\n\r\n// Ф-я збереження даних у LocalStorage\r\nfunction saveToLS(arr, name) {\r\n    localStorage.setItem(name, JSON.stringify(arr));\r\n}\r\n\r\n// Ф-я для відображення дати виконання у нотатці\r\nfunction forDate() {\r\n    const form = document.querySelector('#form');\r\n    let temp;\r\n\r\n    const forDates = form.querySelector('#forDates');\r\n    const dates = form.querySelector('[name=\"dates\"]');\r\n\r\n    if (dates.value === '') {\r\n        temp = forDates.value;\r\n    } else {\r\n        temp = `${dates.value}, ${forDates.value}`;\r\n    }\r\n\r\n    return temp;\r\n}\r\n\r\n// Ф-я додає в масив об'єкт, якщо його немає, і видаляє, якщо він є\r\nfunction checkArr(arr, obj) {\r\n    if (arr.find(note => note.id === obj.id)) {\r\n        const index = arr.findIndex(note => note.id === obj.id);\r\n        arr.splice(index, 1);\r\n    } else {\r\n        arr.push(obj);\r\n    }\r\n}\r\n\r\n// Ф-я зміни мвсивів категорії у Total List\r\nfunction changeCategoryOfTotalList(obj) {\r\n\r\n    // обирає масив відповідно до категорії об'єкта\r\n    const arrOfCategory = chooseArrOfCategory(obj);\r\n\r\n    checkArr(arrOfCategory, obj);\r\n    saveToLS(arrOfCategory, obj.category);\r\n}\r\n\r\n// Ф-я створення дати\r\nfunction today() {\r\n    const today = new Date();\r\n    const options = {\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: 'numeric'\r\n    };\r\n\r\n    const now = today.toLocaleString('en-US', options);\r\n    return now;\r\n}\r\n\r\nfunction checkIdFromCategory(category) {\r\n    return category.split(' ').length === 1 ? category : category.split(' ').join(\"\");\r\n}\r\n\r\n// Ф-я перевірки у Total List чи є пусті масиви з нотатками\r\nfunction checkTotalListTasks() {\r\n    const activeTasks = document.querySelectorAll('.active-tasks');\r\n    activeTasks.forEach(item => {\r\n        if (item.innerText === '0') {\r\n            item.closest('.card').remove();\r\n        }\r\n    });\r\n}\r\n\r\nexport {\r\n    setImgFromCategory,\r\n    saveToLS,\r\n    forDate,\r\n    changeCategoryOfTotalList,\r\n    today,\r\n    checkIdFromCategory,\r\n    checkTotalListTasks\r\n};","import { notes } from \"./render\";\r\n\r\nfunction showArchive(parentNoteSelector, parentTotalSelector) {\r\n    const notesList = document.querySelector(parentNoteSelector),\r\n        totalList = document.querySelector(parentTotalSelector);\r\n\r\n    // Відображення архивованих нотаток по натисканню на кнопку \"Show archive\"\r\n    totalList.addEventListener('click', showArciveByCategory);\r\n\r\n    // Ф-я дії по натисканню на кнопку \"Show archive\"\r\n    function showArciveByCategory(e) {\r\n        if (e.target.classList.contains('total-btn')) {\r\n            const categoryName = e.target.closest('.card').dataset.category;\r\n            showArch(categoryName);\r\n            e.target.classList.add('hide');\r\n        }\r\n    }\r\n    // Ф-я відображення архивованих нотаток відповідно категорії\r\n    function showArch(category) {\r\n        const arrNotes = notes.filter(note => note.completed === true && note.category === category);\r\n\r\n        arrNotes.forEach(note => {\r\n            const checkAtr = notesList.querySelector(`#${note.id}`);\r\n            checkAtr.removeAttribute('hidden');\r\n        });\r\n    }\r\n}\r\n\r\nexport default showArchive;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\r\n\r\nimport renderFromLS from \"./modules/render\";\r\nimport showArchive from \"./modules/showArchive\";\r\nimport { createNote } from \"./modules/createNote\";\r\nimport { editNote } from \"./modules/editNote\";\r\nimport { modal } from \"./modules/modal\";\r\nimport deleteNote from \"./modules/deleteNote\";\r\nimport archiveNote from \"./modules/archiveNote\";\r\n\r\n\r\nrenderFromLS();\r\nshowArchive('.notes-list', '.total-list');\r\ncreateNote('#form', \".modal\", \".notes_create-btn\");\r\neditNote('#form', \".modal\", '.notes-list');\r\nmodal('#form', \".modal\", \".modal_footer-btnCancel\", '[data-close]');\r\ndeleteNote('.notes-list');\r\narchiveNote('.notes-list');\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":[],"sourceRoot":""}